cmake_minimum_required(VERSION 3.8.0)

project(AntiQuark)

set(CMAKE_CXX_STANDARD 17)

find_package(Vulkan REQUIRED FATAL_ERROR)

file(GLOB_RECURSE ENGINE_INCLUDE_CORE "${ENGINE_ROOT}/Core/*.hpp" "${ENGINE_ROOT}/Core/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_CORE "${ENGINE_ROOT}/Core/*.cpp" "${ENGINE_ROOT}/Core/*.c")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_INCLUDE_CORE} ${ENGINE_SOURCE_CORE} )
set(CORE_FILES ${ENGINE_INCLUDE_CORE} ${ENGINE_SOURCE_CORE})

file(GLOB_RECURSE ENGINE_INCLUDE_INPUT "${ENGINE_ROOT}/Input/*.hpp" "${ENGINE_ROOT}/Input/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_INPUT "${ENGINE_ROOT}/Input/*.cpp" "${ENGINE_ROOT}/Input/*.c")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_INCLUDE_INPUT} ${ENGINE_SOURCE_INPUT} )
set(INPUT_FILES ${ENGINE_INCLUDE_INPUT} ${ENGINE_SOURCE_INPUT})

file(GLOB_RECURSE ENGINE_INCLUDE_PROFILING "${ENGINE_ROOT}/Profiling/*.hpp" "${ENGINE_ROOT}/Profiling/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_PROFILING "${ENGINE_ROOT}/Profiling/*.cpp" "${ENGINE_ROOT}/Profiling/*.c")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_INCLUDE_PROFILING} ${ENGINE_SOURCE_PROFILING} )
set(PROFILING_FILES ${ENGINE_INCLUDE_PROFILING} ${ENGINE_SOURCE_PROFILING})

file(GLOB_RECURSE ENGINE_INCLUDE_RENDER "${ENGINE_ROOT}/Renderer/*.hpp" "${ENGINE_ROOT}/Renderer/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_RENDER "${ENGINE_ROOT}/Renderer/*.cpp" "${ENGINE_ROOT}/Renderer/*.c")
file(GLOB_RECURSE ENGINE_SHADERS_RENDER "${ENGINE_ROOT}/Renderer/*.shader")
set(RENDERER_FILES ${ENGINE_INCLUDE_RENDER} ${ENGINE_SOURCE_RENDER})
set(RENDERER_FILES_ALL ${ENGINE_INCLUDE_RENDER} ${ENGINE_SOURCE_RENDER} ${ENGINE_SHADERS_RENDER})
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${RENDERER_FILES_ALL})

file(GLOB_RECURSE ENGINE_INCLUDE_SCRIPTING "${ENGINE_ROOT}/Scripting/*.hpp" "${ENGINE_ROOT}/Scripting/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_SCRIPTING "${ENGINE_ROOT}/Scripting/*.cpp" "${ENGINE_ROOT}/Scripting/*.c")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_INCLUDE_SCRIPTING} ${ENGINE_SOURCE_SCRIPTING} )
set(SCRIPTING_FILES ${ENGINE_INCLUDE_SCRIPTING} ${ENGINE_SOURCE_SCRIPTING})

file(GLOB_RECURSE ENGINE_INCLUDE_SOUND "${ENGINE_ROOT}/Sound/*.hpp" "${ENGINE_ROOT}/Sound/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_SOUND "${ENGINE_ROOT}/Sound/*.cpp" "${ENGINE_ROOT}/Sound/*.c")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_INCLUDE_SOUND} ${ENGINE_SOURCE_SOUND} )
set(SOUND_FILES ${ENGINE_INCLUDE_SOUND} ${ENGINE_SOURCE_SOUND})

file(GLOB_RECURSE ENGINE_INCLUDE_GAMEPLAY "${ENGINE_ROOT}/Gameplay/*.hpp" "${ENGINE_ROOT}/Gameplay/*.h")
file(GLOB_RECURSE ENGINE_SOURCE_GAMEPLAY "${ENGINE_ROOT}/Gameplay/*.cpp" "${ENGINE_ROOT}/Gameplay/*.c")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_INCLUDE_GAMEPLAY} ${ENGINE_SOURCE_GAMEPLAY} )
set(GAMEPLAY_FILES ${ENGINE_INCLUDE_GAMEPLAY} ${ENGINE_SOURCE_GAMEPLAY})

add_library (AntiQuark ${CORE_FILES} ${INPUT_FILES} ${PROFILING_FILES} ${RENDERER_FILES_ALL} ${SCRIPTING_FILES} ${SOUND_FILES} ${GAMEPLAY_FILES})

#add_subdirectory(Libraries/cereal/)
include_directories(${ENGINE_ROOT}/Libraries/cereal/include/)
include_directories(${ENGINE_ROOT}/Libraries/entt/single_include/)
include_directories(${ENGINE_ROOT}/Libraries/glfw/include/)
include_directories(${ENGINE_ROOT}/Libraries/taskflow/)
include_directories(${ENGINE_ROOT}/Libraries/json/single_include/)
include_directories(${ENGINE_ROOT}/Libraries/glm/)
include_directories(${DEMO_ROOT})
include_directories(${Vulkan_INCLUDE_DIR})

add_subdirectory(Libraries/glfw/)
#add_subdirectory(Libraries/taskflow/)

include_directories(${ENGINE_ROOT})

target_link_libraries(AntiQuark glfw)
target_link_libraries (AntiQuark ${Vulkan_LIBRARY})
set_target_properties(
    AntiQuark PROPERTIES
    VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/Data")